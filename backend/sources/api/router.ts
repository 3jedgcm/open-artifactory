import {
  json, Request, Response, Router, static as expressStatic, urlencoded
} from 'express'
import path from 'path'
import compression from 'compression'
import OpenArtifactoryError from '../model/errors/OpenArtifactoryError'
import errorHandlerMiddleware from './middlewares/errorHandlerMiddleware'
import { RegisterRoutes } from '../generated/routes'
import corsMiddleware from './middlewares/corsMiddleware'

/**
 * Default router
 * @see {@link Router} for usage
 */
const router = Router()

/**
 * Set CORS settings
 */
router.use(corsMiddleware)

/**
 * Enable g-zip compression
 */
router.use(compression())

/**
 * Use parser middlewares
 */
router.use(
  urlencoded({
    extended: true
  })
)
router.use(json())

/**
 * Root endpoint for front end interface
 */
router.get('/', (request: Request, response: Response) => {
  response.sendFile(path.join(__dirname, '/public/index.html'))
})
router.use(expressStatic(path.join(__dirname, '/public')))

/**
 * Use routes generated by tsoa
 */
RegisterRoutes(router)

/**
 * Define default route (404 Not found)
 */
router.get('*', (request: Request, response: Response) => {
  const error = new OpenArtifactoryError(404, 'Not found')
  response.status(404)
    .send(error.httpResponse)
})

/**
 * Use error handler middleware
 */
router.use(errorHandlerMiddleware)

export default router
